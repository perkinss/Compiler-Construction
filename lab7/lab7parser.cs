// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.0
// Machine:  w87-172-154.wireless.uvic.ca
// DateTime: 2014-06-24 11:10:05 AM
// UserName: sperkins
// Input file <lab7parser.y - 2014-06-23 10:01:08 PM>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using System.IO;
using ASTree;

public enum Tokens {error=126,
    EOF=127,NUM=128,IDENT=129,FUN=130,VAR=131,WHILE=132,
    IF=133,THEN=134,ELSE=135,RETURN=136,LE=137,GE=138,
    NE=139,AND=140,OR=141,NEG=142,DBG_SYMS=143,EQ=144,
    UMINUS=145,NOT=146};

public struct ValueType
#line 45 "lab7parser.y"
{
#line 46 "lab7parser.y"
  public AST statement;
#line 47 "lab7parser.y"
  public List<AST> statements;
#line 48 "lab7parser.y"
  public ASTExpr expr;
#line 49 "lab7parser.y"
  public ASTBlock block;
#line 50 "lab7parser.y"
  public List<ASTExpr> exprs;
#line 51 "lab7parser.y"
  public List<string> idents;
#line 52 "lab7parser.y"
  public List<ASTParam> parms;
#line 53 "lab7parser.y"
  public ASTIdent ident;
#line 54 "lab7parser.y"
  public ASTType tipe;
#line 55 "lab7parser.y"
  public ASTParam parm;
#line 56 "lab7parser.y"
}
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from lab7parser.y - 2014-06-23 10:01:08 PM
#line 18 "lab7parser.y"
    LexScanner.Scanner lexer;
#line 19 "lab7parser.y"

#line 20 "lab7parser.y"
    // define our own constructor for the Parser class
#line 21 "lab7parser.y"
    public Parser( LexScanner.Scanner lexer ): base(lexer) {
#line 22 "lab7parser.y"
        this.Scanner = this.lexer = lexer;
#line 23 "lab7parser.y"
    }
#line 24 "lab7parser.y"

#line 25 "lab7parser.y"
    // returns the lexer's current line number
#line 26 "lab7parser.y"
    public int LineNumber {
#line 27 "lab7parser.y"
        get{ return lexer.LineNumber; }
#line 28 "lab7parser.y"
    }
#line 29 "lab7parser.y"

#line 30 "lab7parser.y"
    // Use this function for reporting non-fatal errors discovered
#line 31 "lab7parser.y"
    // while parsing. An example usage is:
#line 32 "lab7parser.y"
    //    yyerror( "Identifier {0} has not been declared", idname );
#line 33 "lab7parser.y"
    public void yyerror( string format, params Object[] args ) {
#line 34 "lab7parser.y"
        Console.Write("{0}: ", LineNumber);
#line 35 "lab7parser.y"
        Console.WriteLine(format, args);
#line 36 "lab7parser.y"
    }
#line 37 "lab7parser.y"

#line 38 "lab7parser.y"
    ASTProgram program = new ASTProgram();
#line 39 "lab7parser.y"

#line 40 "lab7parser.y"
    public AST SyntaxTree {get{return program;}}
#line 41 "lab7parser.y"

#line 42 "lab7parser.y"
    string saved_text;
  // End verbatim content from lab7parser.y - 2014-06-23 10:01:08 PM

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[46];
  private static State[] states = new State[83];
  private static string[] nonTerms = new string[] {
      "StatementList", "Block", "Statement", "Debug", "Function", "While", "IfStmt", 
      "Return", "ExprList", "Expr", "Ident", "Call", "Atom", "BExpr", "ParamList", 
      "Type", "Param", "Program", "$accept", "Anon@1", };

  static Parser() {
    states[0] = new State(-3,new int[]{-18,1});
    states[1] = new State(new int[]{127,2,130,4},new int[]{-5,3});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{129,47},new int[]{-11,5});
    states[5] = new State(new int[]{40,6});
    states[6] = new State(new int[]{129,78,41,-8,44,-8},new int[]{-15,7,-17,82});
    states[7] = new State(new int[]{41,8,44,76});
    states[8] = new State(new int[]{58,9});
    states[9] = new State(new int[]{129,75},new int[]{-16,10});
    states[10] = new State(new int[]{123,12,127,-12,130,-12},new int[]{-2,11});
    states[11] = new State(-5);
    states[12] = new State(new int[]{125,73,131,16,129,47,133,57,132,63,143,67,136,69},new int[]{-1,13,-3,74,-11,50,-12,54,-7,56,-6,62,-4,66,-8,68});
    states[13] = new State(new int[]{125,14,131,16,129,47,133,57,132,63,143,67,136,69},new int[]{-3,15,-11,50,-12,54,-7,56,-6,62,-4,66,-8,68});
    states[14] = new State(-13);
    states[15] = new State(-15);
    states[16] = new State(new int[]{129,47},new int[]{-11,17});
    states[17] = new State(new int[]{61,18});
    states[18] = new State(new int[]{45,33,40,36,128,40,129,47},new int[]{-10,19,-14,35,-13,39,-11,41,-12,48});
    states[19] = new State(new int[]{59,20,43,21,45,23,42,25,94,27,60,29,144,31});
    states[20] = new State(-21);
    states[21] = new State(new int[]{45,33,40,36,128,40,129,47},new int[]{-10,22,-14,35,-13,39,-11,41,-12,48});
    states[22] = new State(new int[]{43,-28,45,-28,42,25,94,27,60,-28,144,-28,59,-28,41,-28,44,-28});
    states[23] = new State(new int[]{45,33,40,36,128,40,129,47},new int[]{-10,24,-14,35,-13,39,-11,41,-12,48});
    states[24] = new State(new int[]{43,-29,45,-29,42,25,94,27,60,-29,144,-29,59,-29,41,-29,44,-29});
    states[25] = new State(new int[]{45,33,40,36,128,40,129,47},new int[]{-10,26,-14,35,-13,39,-11,41,-12,48});
    states[26] = new State(new int[]{43,-30,45,-30,42,-30,94,27,60,-30,144,-30,59,-30,41,-30,44,-30});
    states[27] = new State(new int[]{45,33,40,36,128,40,129,47},new int[]{-10,28,-14,35,-13,39,-11,41,-12,48});
    states[28] = new State(new int[]{43,-31,45,-31,42,-31,94,27,60,-31,144,-31,59,-31,41,-31,44,-31});
    states[29] = new State(new int[]{45,33,40,36,128,40,129,47},new int[]{-10,30,-14,35,-13,39,-11,41,-12,48});
    states[30] = new State(new int[]{43,21,45,23,42,25,94,27,60,-32,144,-32,59,-32,41,-32,44,-32});
    states[31] = new State(new int[]{45,33,40,36,128,40,129,47},new int[]{-10,32,-14,35,-13,39,-11,41,-12,48});
    states[32] = new State(new int[]{43,21,45,23,42,25,94,27,60,-33,144,-33,59,-33,41,-33,44,-33});
    states[33] = new State(new int[]{45,33,40,36,128,40,129,47},new int[]{-10,34,-14,35,-13,39,-11,41,-12,48});
    states[34] = new State(new int[]{43,-34,45,-34,42,-34,94,27,60,-34,144,-34,59,-34,41,-34,44,-34});
    states[35] = new State(-35);
    states[36] = new State(new int[]{45,33,40,36,128,40,129,47},new int[]{-10,37,-14,35,-13,39,-11,41,-12,48});
    states[37] = new State(new int[]{41,38,43,21,45,23,42,25,94,27,60,29,144,31});
    states[38] = new State(-37);
    states[39] = new State(-36);
    states[40] = new State(-38);
    states[41] = new State(new int[]{40,42,59,-39,43,-39,45,-39,42,-39,94,-39,60,-39,144,-39,41,-39,44,-39});
    states[42] = new State(new int[]{45,33,40,36,128,40,129,47,41,-45,44,-45},new int[]{-9,43,-10,49,-14,35,-13,39,-11,41,-12,48});
    states[43] = new State(new int[]{41,44,44,45});
    states[44] = new State(-41);
    states[45] = new State(new int[]{45,33,40,36,128,40,129,47},new int[]{-10,46,-14,35,-13,39,-11,41,-12,48});
    states[46] = new State(new int[]{43,21,45,23,42,25,94,27,60,29,144,31,41,-43,44,-43});
    states[47] = new State(-42);
    states[48] = new State(-40);
    states[49] = new State(new int[]{43,21,45,23,42,25,94,27,60,29,144,31,41,-44,44,-44});
    states[50] = new State(new int[]{61,51,40,42});
    states[51] = new State(new int[]{45,33,40,36,128,40,129,47},new int[]{-10,52,-14,35,-13,39,-11,41,-12,48});
    states[52] = new State(new int[]{59,53,43,21,45,23,42,25,94,27,60,29,144,31});
    states[53] = new State(-22);
    states[54] = new State(new int[]{59,55});
    states[55] = new State(-23);
    states[56] = new State(-24);
    states[57] = new State(new int[]{40,36},new int[]{-14,58});
    states[58] = new State(new int[]{123,12,135,-12},new int[]{-2,59});
    states[59] = new State(new int[]{135,60});
    states[60] = new State(new int[]{123,12,125,-12,131,-12,129,-12,133,-12,132,-12,143,-12,136,-12},new int[]{-2,61});
    states[61] = new State(-17);
    states[62] = new State(-25);
    states[63] = new State(new int[]{40,36},new int[]{-14,64});
    states[64] = new State(new int[]{123,12,125,-12,131,-12,129,-12,133,-12,132,-12,143,-12,136,-12},new int[]{-2,65});
    states[65] = new State(-18);
    states[66] = new State(-26);
    states[67] = new State(-4);
    states[68] = new State(-27);
    states[69] = new State(new int[]{59,72,45,33,40,36,128,40,129,47},new int[]{-10,70,-14,35,-13,39,-11,41,-12,48});
    states[70] = new State(new int[]{59,71,43,21,45,23,42,25,94,27,60,29,144,31});
    states[71] = new State(-19);
    states[72] = new State(-20);
    states[73] = new State(-14);
    states[74] = new State(-16);
    states[75] = new State(-11);
    states[76] = new State(new int[]{129,78},new int[]{-17,77});
    states[77] = new State(-6);
    states[78] = new State(-9,new int[]{-20,79});
    states[79] = new State(new int[]{58,80});
    states[80] = new State(new int[]{129,75},new int[]{-16,81});
    states[81] = new State(-10);
    states[82] = new State(-7);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-19, new int[]{-18,127});
    rules[2] = new Rule(-18, new int[]{-18,-5});
    rules[3] = new Rule(-18, new int[]{});
    rules[4] = new Rule(-4, new int[]{143});
    rules[5] = new Rule(-5, new int[]{130,-11,40,-15,41,58,-16,-2});
    rules[6] = new Rule(-15, new int[]{-15,44,-17});
    rules[7] = new Rule(-15, new int[]{-17});
    rules[8] = new Rule(-15, new int[]{});
    rules[9] = new Rule(-20, new int[]{});
    rules[10] = new Rule(-17, new int[]{129,-20,58,-16});
    rules[11] = new Rule(-16, new int[]{129});
    rules[12] = new Rule(-2, new int[]{});
    rules[13] = new Rule(-2, new int[]{123,-1,125});
    rules[14] = new Rule(-2, new int[]{123,125});
    rules[15] = new Rule(-1, new int[]{-1,-3});
    rules[16] = new Rule(-1, new int[]{-3});
    rules[17] = new Rule(-7, new int[]{133,-14,-2,135,-2});
    rules[18] = new Rule(-6, new int[]{132,-14,-2});
    rules[19] = new Rule(-8, new int[]{136,-10,59});
    rules[20] = new Rule(-8, new int[]{136,59});
    rules[21] = new Rule(-3, new int[]{131,-11,61,-10,59});
    rules[22] = new Rule(-3, new int[]{-11,61,-10,59});
    rules[23] = new Rule(-3, new int[]{-12,59});
    rules[24] = new Rule(-3, new int[]{-7});
    rules[25] = new Rule(-3, new int[]{-6});
    rules[26] = new Rule(-3, new int[]{-4});
    rules[27] = new Rule(-3, new int[]{-8});
    rules[28] = new Rule(-10, new int[]{-10,43,-10});
    rules[29] = new Rule(-10, new int[]{-10,45,-10});
    rules[30] = new Rule(-10, new int[]{-10,42,-10});
    rules[31] = new Rule(-10, new int[]{-10,94,-10});
    rules[32] = new Rule(-10, new int[]{-10,60,-10});
    rules[33] = new Rule(-10, new int[]{-10,144,-10});
    rules[34] = new Rule(-10, new int[]{45,-10});
    rules[35] = new Rule(-10, new int[]{-14});
    rules[36] = new Rule(-10, new int[]{-13});
    rules[37] = new Rule(-14, new int[]{40,-10,41});
    rules[38] = new Rule(-13, new int[]{128});
    rules[39] = new Rule(-13, new int[]{-11});
    rules[40] = new Rule(-13, new int[]{-12});
    rules[41] = new Rule(-12, new int[]{-11,40,-9,41});
    rules[42] = new Rule(-11, new int[]{129});
    rules[43] = new Rule(-9, new int[]{-9,44,-10});
    rules[44] = new Rule(-9, new int[]{-10});
    rules[45] = new Rule(-9, new int[]{});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // Program -> Program, Function
#line 83 "lab7parser.y"
{program.Add(ValueStack[ValueStack.Depth-1].statement);}
        break;
      case 4: // Debug -> DBG_SYMS
#line 87 "lab7parser.y"
{CurrentSemanticValue.statement = new ASTDebug(lexer.LineNumber,lexer.yytext.Trim());}
        break;
      case 5: // Function -> FUN, Ident, '(', ParamList, ')', ':', Type, Block
#line 91 "lab7parser.y"
{CurrentSemanticValue.statement = new ASTFunction(ValueStack[ValueStack.Depth-7].ident,ValueStack[ValueStack.Depth-5].parms,ValueStack[ValueStack.Depth-2].tipe,ValueStack[ValueStack.Depth-1].block);}
        break;
      case 6: // ParamList -> ParamList, ',', Param
#line 94 "lab7parser.y"
{CurrentSemanticValue.parms = ValueStack[ValueStack.Depth-3].parms; ValueStack[ValueStack.Depth-3].parms.Add(ValueStack[ValueStack.Depth-1].parm);}
        break;
      case 7: // ParamList -> Param
#line 95 "lab7parser.y"
{CurrentSemanticValue.parms = new List<ASTParam>();CurrentSemanticValue.parms.Add(ValueStack[ValueStack.Depth-1].parm);}
        break;
      case 8: // ParamList -> /* empty */
#line 96 "lab7parser.y"
{CurrentSemanticValue.parms = new List<ASTParam>();}
        break;
      case 9: // Anon@1 -> /* empty */
#line 99 "lab7parser.y"
{saved_text=lexer.yytext;}
        break;
      case 10: // Param -> IDENT, Anon@1, ':', Type
#line 100 "lab7parser.y"
{CurrentSemanticValue.parm = new ASTParam(saved_text,ValueStack[ValueStack.Depth-1].tipe);}
        break;
      case 11: // Type -> IDENT
#line 103 "lab7parser.y"
{CurrentSemanticValue.tipe = new ASTType(lexer.yytext);}
        break;
      case 13: // Block -> '{', StatementList, '}'
#line 106 "lab7parser.y"
{CurrentSemanticValue.block = new ASTBlock(ValueStack[ValueStack.Depth-2].statements);}
        break;
      case 14: // Block -> '{', '}'
#line 107 "lab7parser.y"
{CurrentSemanticValue.block = new ASTBlock();}
        break;
      case 15: // StatementList -> StatementList, Statement
#line 110 "lab7parser.y"
{CurrentSemanticValue.statements = ValueStack[ValueStack.Depth-2].statements;CurrentSemanticValue.statements.Add(ValueStack[ValueStack.Depth-1].statement);}
        break;
      case 16: // StatementList -> Statement
#line 111 "lab7parser.y"
{CurrentSemanticValue.statements = new List<AST>();CurrentSemanticValue.statements.Add(ValueStack[ValueStack.Depth-1].statement);}
        break;
      case 17: // IfStmt -> IF, BExpr, Block, ELSE, Block
#line 114 "lab7parser.y"
{CurrentSemanticValue.statement = new ASTIf(ValueStack[ValueStack.Depth-4].expr,ValueStack[ValueStack.Depth-3].block,ValueStack[ValueStack.Depth-1].block);}
        break;
      case 18: // While -> WHILE, BExpr, Block
#line 117 "lab7parser.y"
{CurrentSemanticValue.statement = new ASTWhile(ValueStack[ValueStack.Depth-2].expr,ValueStack[ValueStack.Depth-1].block);}
        break;
      case 19: // Return -> RETURN, Expr, ';'
#line 120 "lab7parser.y"
{CurrentSemanticValue.statement = new ASTReturn(ValueStack[ValueStack.Depth-2].expr);}
        break;
      case 20: // Return -> RETURN, ';'
#line 121 "lab7parser.y"
{CurrentSemanticValue.statement = new ASTReturn();}
        break;
      case 21: // Statement -> VAR, Ident, '=', Expr, ';'
#line 124 "lab7parser.y"
{CurrentSemanticValue.statement = new ASTVarDecl(ValueStack[ValueStack.Depth-4].ident,ValueStack[ValueStack.Depth-2].expr);}
        break;
      case 22: // Statement -> Ident, '=', Expr, ';'
#line 125 "lab7parser.y"
{CurrentSemanticValue.statement = new ASTAssign(ValueStack[ValueStack.Depth-4].ident,ValueStack[ValueStack.Depth-2].expr);}
        break;
      case 23: // Statement -> Call, ';'
#line 126 "lab7parser.y"
{CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-2].expr;}
        break;
      case 24: // Statement -> IfStmt
#line 127 "lab7parser.y"
{CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement;}
        break;
      case 25: // Statement -> While
#line 128 "lab7parser.y"
{CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement;}
        break;
      case 26: // Statement -> Debug
#line 129 "lab7parser.y"
{CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement;}
        break;
      case 27: // Statement -> Return
#line 130 "lab7parser.y"
{CurrentSemanticValue.statement = ValueStack[ValueStack.Depth-1].statement;}
        break;
      case 28: // Expr -> Expr, '+', Expr
#line 133 "lab7parser.y"
{CurrentSemanticValue.expr = new ASTBinExpr(ValueStack[ValueStack.Depth-3].expr,'+',ValueStack[ValueStack.Depth-1].expr);}
        break;
      case 29: // Expr -> Expr, '-', Expr
#line 134 "lab7parser.y"
{CurrentSemanticValue.expr = new ASTBinExpr(ValueStack[ValueStack.Depth-3].expr,'-',ValueStack[ValueStack.Depth-1].expr);}
        break;
      case 30: // Expr -> Expr, '*', Expr
#line 135 "lab7parser.y"
{CurrentSemanticValue.expr = new ASTBinExpr(ValueStack[ValueStack.Depth-3].expr,'*',ValueStack[ValueStack.Depth-1].expr);}
        break;
      case 31: // Expr -> Expr, '^', Expr
#line 137 "lab7parser.y"
{CurrentSemanticValue.expr = new ASTBinExpr(ValueStack[ValueStack.Depth-3].expr,'^',ValueStack[ValueStack.Depth-1].expr);}
        break;
      case 32: // Expr -> Expr, '<', Expr
#line 138 "lab7parser.y"
{CurrentSemanticValue.expr = new ASTBinExpr(ValueStack[ValueStack.Depth-3].expr,'<',ValueStack[ValueStack.Depth-1].expr);}
        break;
      case 33: // Expr -> Expr, EQ, Expr
#line 140 "lab7parser.y"
{CurrentSemanticValue.expr = new ASTBinExpr(ValueStack[ValueStack.Depth-3].expr,'=',ValueStack[ValueStack.Depth-1].expr);}
        break;
      case 34: // Expr -> '-', Expr
#line 143 "lab7parser.y"
{CurrentSemanticValue.expr = new ASTUnrExpr(   '-',ValueStack[ValueStack.Depth-1].expr);}
        break;
      case 35: // Expr -> BExpr
#line 145 "lab7parser.y"
{CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr;}
        break;
      case 36: // Expr -> Atom
#line 146 "lab7parser.y"
{CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr;}
        break;
      case 37: // BExpr -> '(', Expr, ')'
#line 148 "lab7parser.y"
{CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-2].expr;}
        break;
      case 38: // Atom -> NUM
#line 150 "lab7parser.y"
{CurrentSemanticValue.expr = new ASTInteger(lexer.LineNumber,lexer.yytext);}
        break;
      case 39: // Atom -> Ident
#line 151 "lab7parser.y"
{CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].ident;}
        break;
      case 40: // Atom -> Call
#line 152 "lab7parser.y"
{CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr;}
        break;
      case 41: // Call -> Ident, '(', ExprList, ')'
#line 155 "lab7parser.y"
{CurrentSemanticValue.expr = new ASTCall(ValueStack[ValueStack.Depth-4].ident,ValueStack[ValueStack.Depth-2].exprs);}
        break;
      case 42: // Ident -> IDENT
#line 158 "lab7parser.y"
{CurrentSemanticValue.ident = new ASTIdent(lexer.LineNumber,lexer.yytext);}
        break;
      case 43: // ExprList -> ExprList, ',', Expr
#line 161 "lab7parser.y"
{ValueStack[ValueStack.Depth-3].exprs.Add(ValueStack[ValueStack.Depth-1].expr);CurrentSemanticValue.exprs = ValueStack[ValueStack.Depth-3].exprs;}
        break;
      case 44: // ExprList -> Expr
#line 162 "lab7parser.y"
{CurrentSemanticValue.exprs = new List<ASTExpr>();CurrentSemanticValue.exprs.Add(ValueStack[ValueStack.Depth-1].expr);}
        break;
      case 45: // ExprList -> /* empty */
#line 163 "lab7parser.y"
{CurrentSemanticValue.exprs = new List<ASTExpr>();}
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
