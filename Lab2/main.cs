// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.0
// Machine:  Catherby
// DateTime: 22/05/2014 7:57:48 PM
// UserName: tlavallee
// Input file <lab2.y - 20/05/2014 8:21:49 PM>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using System.IO;

public enum Tokens {error=95,EOF=96,
    NUM=97,IDENT=98,ASSIGN=99,UMINUS=100};

// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<int,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
public class ScanObj {
  public int token;
  public int yylval;
  public LexLocation yylloc;
  public ScanObj( int t, int val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

public class Parser: ShiftReduceParser<int, LexLocation>
{
  // Verbatim content from lab2.y - 20/05/2014 8:21:49 PM
#line 20 "lab2.y"
  public void yyerror( string format, params Object[] args ) {
#line 21 "lab2.y"
    Console.Write("{0}: ", 99);//LineNumber);
#line 22 "lab2.y"
    Console.WriteLine(format, args);
#line 23 "lab2.y"
  }
  // End verbatim content from lab2.y - 20/05/2014 8:21:49 PM

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[15];
  private static State[] states = new State[19];
  private static string[] nonTerms = new string[] {
      "StatementList", "$accept", "Statement", "Expr", "Factor", "Atom", "Ident", 
      };

  static Parser() {
    states[0] = new State(-3,new int[]{-1,1});
    states[1] = new State(new int[]{96,2,97,16,98,18,10,-5},new int[]{-3,3,-4,5,-5,14,-6,15,-7,17});
    states[2] = new State(-1);
    states[3] = new State(new int[]{10,4});
    states[4] = new State(-2);
    states[5] = new State(new int[]{43,6,45,8,42,10,47,12,10,-4});
    states[6] = new State(new int[]{97,16,98,18},new int[]{-4,7,-5,14,-6,15,-7,17});
    states[7] = new State(new int[]{43,-6,45,-6,42,10,47,12,10,-6});
    states[8] = new State(new int[]{97,16,98,18},new int[]{-4,9,-5,14,-6,15,-7,17});
    states[9] = new State(new int[]{43,-7,45,-7,42,10,47,12,10,-7});
    states[10] = new State(new int[]{97,16,98,18},new int[]{-4,11,-5,14,-6,15,-7,17});
    states[11] = new State(-8);
    states[12] = new State(new int[]{97,16,98,18},new int[]{-4,13,-5,14,-6,15,-7,17});
    states[13] = new State(-9);
    states[14] = new State(-10);
    states[15] = new State(-11);
    states[16] = new State(-12);
    states[17] = new State(-13);
    states[18] = new State(-14);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,96});
    rules[2] = new Rule(-1, new int[]{-1,-3,10});
    rules[3] = new Rule(-1, new int[]{});
    rules[4] = new Rule(-3, new int[]{-4});
    rules[5] = new Rule(-3, new int[]{});
    rules[6] = new Rule(-4, new int[]{-4,43,-4});
    rules[7] = new Rule(-4, new int[]{-4,45,-4});
    rules[8] = new Rule(-4, new int[]{-4,42,-4});
    rules[9] = new Rule(-4, new int[]{-4,47,-4});
    rules[10] = new Rule(-4, new int[]{-5});
    rules[11] = new Rule(-5, new int[]{-6});
    rules[12] = new Rule(-6, new int[]{97});
    rules[13] = new Rule(-6, new int[]{-7});
    rules[14] = new Rule(-7, new int[]{98});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // StatementList -> StatementList, Statement, '\n'
#line 29 "lab2.y"
{writeln(";----");}
        break;
      case 6: // Expr -> Expr, '+', Expr
#line 37 "lab2.y"
{writeln("add");}
        break;
      case 7: // Expr -> Expr, '-', Expr
#line 38 "lab2.y"
{writeln("sub");}
        break;
      case 8: // Expr -> Expr, '*', Expr
#line 39 "lab2.y"
{writeln("mul");}
        break;
      case 9: // Expr -> Expr, '/', Expr
#line 40 "lab2.y"
{writeln("div");}
        break;
      case 12: // Atom -> NUM
#line 46 "lab2.y"
{writeln("ldc",token_text());}
        break;
      case 14: // Ident -> IDENT
#line 50 "lab2.y"
{push_id();writeln("ldi",pop_id());}
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 55 "lab2.y"
Stack<string> id_stack = new Stack<string>();
#line 56 "lab2.y"

#line 57 "lab2.y"
void push_id() {
#line 58 "lab2.y"
	string t = ((LexScanner.Scanner)Scanner).last_token_text;
#line 59 "lab2.y"
	id_stack.Push(t);
#line 60 "lab2.y"
}
#line 61 "lab2.y"
string pop_id() {
#line 62 "lab2.y"
	return id_stack.Pop();
#line 63 "lab2.y"
}
#line 64 "lab2.y"

#line 65 "lab2.y"
string token_text() {
#line 66 "lab2.y"
	return ((LexScanner.Scanner)Scanner).last_token_text;
#line 67 "lab2.y"
}
#line 68 "lab2.y"

#line 69 "lab2.y"
void writeln() {
#line 70 "lab2.y"
	writeln(null,null);
#line 71 "lab2.y"
}
#line 72 "lab2.y"
void writeln(string opcode) {
#line 73 "lab2.y"
	writeln(opcode,null);
#line 74 "lab2.y"
}
#line 75 "lab2.y"

#line 76 "lab2.y"
void writeln(string opcode, string value) {
#line 77 "lab2.y"
	if (opcode != null) {
#line 78 "lab2.y"
		System.Console.Write(opcode);
#line 79 "lab2.y"
		if (value != null) {
#line 80 "lab2.y"
			System.Console.Write(' '+value);
#line 81 "lab2.y"
		}
#line 82 "lab2.y"
	}
#line 83 "lab2.y"
	System.Console.Write('\n');
#line 84 "lab2.y"
}
#line 85 "lab2.y"

#line 86 "lab2.y"
// The parser needs a constructor
#line 87 "lab2.y"
Parser() : base(null) { }
#line 88 "lab2.y"

#line 89 "lab2.y"
static void Main(string[] args)
#line 90 "lab2.y"
{
#line 91 "lab2.y"
	Parser parser = new Parser();
#line 92 "lab2.y"

#line 93 "lab2.y"
	FileStream file = new FileStream(args[0], FileMode.Open);
#line 94 "lab2.y"
	parser.Scanner = new LexScanner.Scanner(file);
#line 95 "lab2.y"
	System.Console.WriteLine("File: " + args[0]);
#line 96 "lab2.y"

#line 97 "lab2.y"
	parser.Parse();
#line 98 "lab2.y"
}
#line 99 "lab2.y"

#line 100 "lab2.y"

#line 101 "lab2.y"

}
